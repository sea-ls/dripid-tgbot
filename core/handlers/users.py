from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from core.keyboards import inline
from core.utils import callbackdata, google_api, dict_data
import config
from core.utils.state import StateUser


async def get_start(msg: Message | CallbackQuery, state: FSMContext):
    await state.clear()
    first_name = msg.from_user.first_name
    if isinstance(msg, CallbackQuery):
        msg = msg.message
        await msg.delete()

    message = f'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —É–≤–∞–∂–∞–µ–º—ã–π(–∞—è) <b>{first_name}!</b>\n\n' \
              f'üëç –í–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –∑–∞—Ä—É–±–µ–∂–Ω–æ–≥–æ —à–æ–ø–ø–∏–Ω–≥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å.\n' \
              f'üíµ –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –æ–∫—É–Ω–∏—Ç–µ—Å—å –≤ –º–∏—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.'
    reply = inline.start_menu()
    await msg.answer(text=message, reply_markup=reply)


async def calculate_cost_order(call: CallbackQuery):
    message = f'‚è± –í —Ç–µ—á–µ–Ω–∏–∏ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∫—É–ø–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑?\n' \
              f'–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Å–æ–±–∞ –≤–∞–º –ø–æ–º–æ–∂–µ—Ç <a href="https://t.me/Drip_ID0/552">—ç—Ç–æ—Ç –ø–æ—Å—Ç</a>'
    reply = inline.order_fulfillment()
    await call.message.edit_text(text=message, reply_markup=reply, disable_web_page_preview=True)


async def select_product_category(call: CallbackQuery, callback_data: callbackdata.StepOne):
    message = f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:'
    reply = inline.select_product_category(callback_data.buyout)
    await call.message.edit_text(text=message, reply_markup=reply)


async def weight_product(call: CallbackQuery, callback_data: callbackdata.StepTwo, state: FSMContext):
    data = {
        'buyout': callback_data.buyout
    }
    await state.set_data(data)
    message = f'–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö'
    reply = inline.start_menu_return()
    await call.message.edit_text(text=message, reply_markup=reply)
    await state.set_state(StateUser.waiting_weight)


async def msg_currency_product(msg: Message, state: FSMContext):
    try:
        weight = float(msg.text)
    except ValueError:
        try:
            weight_repl = msg.text.replace(',', '.')
            weight = float(weight_repl)
        except ValueError:
            message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –≤–µ—Å —Ç–æ–≤–∞—Ä–∞, –∞ –Ω–µ —Ç–µ–∫—Å—Ç'
            reply = inline.start_menu_return()
            await msg.answer(text=message, reply_markup=reply)
            return
    data = await state.get_data()
    message = f'–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞?'
    reply = inline.currency_product(data.get('buyout'), weight)
    await msg.answer(text=message, reply_markup=reply)
    await state.clear()


async def currency_product(call: CallbackQuery, callback_data: callbackdata.StepTwo):
    message = f'–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞?'
    reply = inline.currency_product(callback_data.buyout, callback_data.category)
    await call.message.edit_text(text=message, reply_markup=reply)


async def specify_cost_product(call: CallbackQuery, callback_data: callbackdata.StepThree, state: FSMContext):
    data = {
        'buyout': callback_data.buyout,
        'category': callback_data.category,
        'currency': callback_data.currency
    }
    await state.set_data(data)
    message = f'–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ (–µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ ' \
              f'—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞):'
    reply = inline.start_menu_return()
    await call.message.edit_text(text=message, reply_markup=reply)
    await state.set_state(StateUser.waiting_money)


async def enter_price_product(msg: Message, state: FSMContext, bot: Bot):
    try:
        money = float(msg.text)
    except ValueError:
        try:
            money_repl = msg.text.replace(',', '.')
            money = float(money_repl)
        except ValueError:
            message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞, –∞ –Ω–µ —Ç–µ–∫—Å—Ç'
            reply = inline.start_menu_return()
            await msg.answer(text=message, reply_markup=reply)
            return

    data = await state.get_data()

    await state.clear()
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
    data_api = google_api.get_google_api()

    if data.get('buyout') == 1:
        buyout = data_api[0]
    elif data.get('buyout') == 2:
        buyout = data_api[1]
    elif data.get('buyout') == 3:
        buyout = data_api[2]
    else:
        buyout = data_api[0]

    dollar = float(buyout.get('–î–æ–ª–ª–∞—Ä'))

    if data.get('currency') == 1:
        exchange_rate = float(buyout.get('–î–æ–ª–ª–∞—Ä'))
        price_per = float(data_api[8].get('–î–æ–ª–ª–∞—Ä'))
    elif data.get('currency') == 2:
        exchange_rate = float(buyout.get('–ï–≤—Ä–æ'))
        price_per = float(data_api[8].get('–ï–≤—Ä–æ'))
    elif data.get('currency') == 3:
        exchange_rate = float(buyout.get('–§—É–Ω—Ç'))
        price_per = float(data_api[8].get('–§—É–Ω—Ç'))
    elif data.get('currency') == 4:
        exchange_rate = float(buyout.get('–Æ–∞–Ω—å'))
        price_per = float(data_api[8].get('–Æ–∞–Ω—å'))
    else:
        exchange_rate = float(buyout.get('–î–æ–ª–ª–∞—Ä'))
        price_per = float(data_api[8].get('–î–æ–ª–ª–∞—Ä'))

    if data.get('category') == 1001:
        goods_weight = float(data_api[5].get('–î–æ–ª–ª–∞—Ä'))
    elif data.get('category') == 1002:
        goods_weight = float(data_api[5].get('–ï–≤—Ä–æ'))
    elif data.get('category') == 1003:
        goods_weight = float(data_api[5].get('–§—É–Ω—Ç'))
    elif data.get('category') == 1004:
        goods_weight = float(data_api[5].get('–Æ–∞–Ω—å'))
    else:
        goods_weight = data.get('category')

    if money * exchange_rate <= 5000:
        commission = 1000
    elif 5000 < (money * exchange_rate) <= 15000:
        commission = 1500
    else:
        commission = (money * exchange_rate * 0.1)
    print(price_per)
    delivery = goods_weight * price_per * exchange_rate
    if data.get('buyout') == 3:
        full_price = f'{round((((money * exchange_rate) + commission + delivery) / dollar), 2)} USDT'
    else:
        full_price = f'{round(((money * exchange_rate) + commission + delivery), 2)} —Ä—É–±.'

    redemption = dict_data.buyout.get(data.get('buyout'))
    category = dict_data.category.get(data.get('category'))
    if category is None:
        category = '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
    currency = dict_data.currency.get(data.get('currency'))

    message = f'<b>–ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç</b>\n\n' \
              f'–í—ã–∫—É–ø: <b>{redemption}</b>\n' \
              f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>\n' \
              f'–í–µ—Å —Ç–æ–≤–∞—Ä–∞: <b>{round(goods_weight, 2)} –∫–≥.</b>\n' \
              f'–í–∞–ª—é—Ç–∞: <b>{currency}</b>\n' \
              f'–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <b>{round(money, 2)}</b>\n' \
              f'–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã: <b>{round(exchange_rate, 2)} —Ä—É–±.</b>\n\n' \
              f'–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{full_price}</b>\n\n' \
              f'–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤–∞–º –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä'
    reply = inline.get_manager()
    await msg.answer(text=message, reply_markup=reply)

    message = f'–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç\n\n' \
              f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n' \
              f'ID: {msg.from_user.id}\n' \
              f'Username: @{msg.from_user.username}\n\n' \
              f'<b>–í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n' \
              f'–í—ã–∫—É–ø: <b>{redemption}</b>\n' \
              f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>\n' \
              f'–í–µ—Å —Ç–æ–≤–∞—Ä–∞: <b>{round(goods_weight, 2)} –∫–≥.</b>\n' \
              f'–í–∞–ª—é—Ç–∞: <b>{currency}</b>\n' \
              f'–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <b>{round(money, 2)}</b>\n' \
              f'–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã: <b>{round(exchange_rate, 2)} —Ä—É–±.</b>\n\n' \
              f'–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{full_price}</b>' \

    for admin in config.ADMIN:
        try:
            await bot.send_message(chat_id=admin, text=message)
        except Exception:
            continue

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
    # exchange_rate - –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã
    # goods_weight - –≤–µ—Å —Ç–æ–≤–∞—Ä–∞
    # price_per - —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ 1 –∫–≥
    # commission - –∫–æ–º–∏—Å—Å–∏—è
    # money - —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞